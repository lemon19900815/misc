; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "myapp"
#define MyAppVersion "1.0"
#define MyAppPublisher "myapp, Inc."
#define MyAppURL "https://www.myapp.com/"
#define MyAppExeName "start.vbs"
#define MyAppAssocName MyAppName + " File"
#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{059DD783-0EE4-4718-8576-E6DF94806DE7}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName=c:\myapp\{#MyAppName}
ChangesAssociations=yes
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputDir=D:\test-inno
OutputBaseFilename=myapp
SetupIconFile=D:\test-inno\setupicon.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "chinese"; MessagesFile: "compiler:Languages\Chinese.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "D:\test-inno\myapp\update\{#MyAppExeName}"; DestDir: "{app}\update"; Flags: ignoreversion
Source: "D:\test-inno\myapp\bin\*"; DestDir: "{app}\bin"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\test-inno\myapp\update\*"; DestDir: "{app}\update"; Flags: ignoreversion recursesubdirs createallsubdirs
; 嵌入依赖安装程序到临时目录
Source: "D:\test-inno\myapp\tools\*"; DestDir: "{tmp}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\update\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\update\{#MyAppExeName}"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\{#MyAppExeName}\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""
; 开机自启动 & 卸载时移除注册表项
Root: HKCU; Subkey: "Software\Microsoft\Windows\CurrentVersion\Run"; ValueType: string; ValueName: "myapp"; ValueData: """{app}\update\{#MyAppExeName}"""; Flags: uninsdeletekey

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\update\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\update\{#MyAppExeName}"; IconFilename: "{app}\update\setupicon.ico"; Tasks: desktopicon

[Run]
Filename: "{app}\update\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: shellexec postinstall skipifsilent

[Code]
function IsAppRunning(AppName, TargetPath : string): Boolean;
var
  WbemLocator: Variant;
  WMIService   : Variant;
  WbemObjectSet: Variant;
begin
  Result := false;
  WbemLocator := CreateOleObject('WBEMScripting.SWbemLocator');
  WMIService := WbemLocator.ConnectServer('', 'root\CIMV2', '', '');
  StringChange(TargetPath, '\', '\\');
  WbemObjectSet := WMIService.ExecQuery(Format('SELECT Name FROM Win32_Process Where Name="%s" AND ExecutablePath LIKE "%s%%"',[AppName, TargetPath]));
  Result := (not VarIsNull(WbemObjectSet) and (WbemObjectSet.Count > 0));
  WbemObjectSet := Unassigned;
  WMIService := Unassigned;
  WbemLocator := Unassigned;
end;

procedure TaskKillProcess(AppName, TargetPath: String);
var
  WbemLocator : Variant;
  WMIService   : Variant;
  WbemObjectSet: Variant;
  WbemObject   : Variant;
begin;
  WbemLocator := CreateOleObject('WbemScripting.SWbemLocator');
  WMIService := WbemLocator.ConnectServer('localhost', 'root\CIMV2');
  StringChange(TargetPath, '\', '\\');
  WbemObjectSet := WMIService.ExecQuery(Format('SELECT * FROM Win32_Process Where Name="%s" AND ExecutablePath LIKE "%s%%"',[AppName, TargetPath]));
  if not VarIsNull(WbemObjectSet) and (WbemObjectSet.Count > 0) then
  begin
    WbemObject := WbemObjectSet.ItemIndex(0);
    if not VarIsNull(WbemObject) then
    begin
      WbemObject.Terminate();
      WbemObject := Unassigned;
    end;
  end;
end;

// 安装设置，可先安装其他文件
function InitializeSetup(): Boolean; 
  var Path:string; 
  var isExsit: Integer;
  ResultCode: Integer;
  CurLang: string;
begin
  CurLang:= ActiveLanguage();
  Result:= true 

  ExtractTemporaryFile('depends.exe'); // 解压到临时目录
  Path := ExpandConstant('{tmp}\depends.exe');
  ShellExec('', Path, '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode)

  if ResultCode <> 0 then
    MsgBox('depends.exe 安装失败，安装程序将退出。', mbError, MB_OK);
    Abort;

end;

function InitializeUninstall(): Boolean;
begin
  Result:= true;

  // 结束进程：使用ExpandConstant展开变量
  if IsAppRunning('Daemon.exe', ExpandConstant('{app}\update\')) then
  begin
    TaskKillProcess('Daemon.exe', ExpandConstant('{app}\update\'));
    sleep(1000);
  end;

  if IsAppRunning('MyApp.exe', ExpandConstant('{app}\bin\')) then
  begin
    TaskKillProcess('MyApp.exe', ExpandConstant('{app}\bin\'));
    sleep(1000);
  end;

  // 卸载时删除指定文件夹，否则日志可能删除不掉；
  DelTree(ExpandConstant('{app}'), True, True, True);
end;

